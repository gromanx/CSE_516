% Gladys Roman% CSE 516 -- DBSCAN% Winter 2020% findNeigbors function was given% extendCluster functionfunction labels = extendCluster(X, labels, p, neighbors, C, eps, minPts)    % extend a cluster with label C from the seed p    % you can define this function recursively. or use a while loop with a queue.     % YOUR CODE HERE%label = labels; label = labels;label(p) = C;i = 1;while i < length (neighbors)    pnext = neighbors(i, :);    pnext = i +1;        pnn = findNeighbors(X, pnext, eps);     if label(pnext) == -1        label(pnext) = C;    elseif label(pnext) == 0        label(pnext) = C;    else        pnext_nn = findNeighbors(X, pnext, eps);        neighbors = vertcat(neighbors: pnext_nn);    end        i = i +1;end    % END OF CODEend%main% Load data.X = load('s2.dat');X = X(:,[1 2]);% DBSCAN% initialize parameters ( you can change them to see the difference)eps = 1.0minPts = 4% initialize indices that contains the label/cluster info of every datapoint.labels = zeros(size(X,1), 1);% 0 - the datapoint hasn't been touched% -1 - the datapoint is considered as noise% any positive integer (e.g 1,2,3,4,...) cluster labelC = 1 % current cluster label starts with 1 % walk through all data points:[m, n] = size(X);for i = 1:m     % check every points, find neighbors, and extend clusters  % YOUR CODE HERE  if labels(i) == 0 || labels(i) == -1     neighbors = findNeighbors(X, i, eps);          if length(neighbors) < minPts         labels(i) = -1;     end          if length(neighbors) >= minPts         labels = extendCluster(X, labels, i, neighbors, C, eps, minPts);         C = C + 1;     end  end  % END OF CODE    end% Plotscatter(X(:,1), X(:,2), 32, labels, 'filled')